services:
  api:
    image: tymonjs/api:latest
    build: 
      context: api
      args:
        NODE_VER: ${NODE_VER}
      platforms:
        - "linux/amd64"
        - "linux/arm64"
      
    container_name: api
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
    command: node server.js
    env_file:
      - .env
    networks:
      proj_network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --spider http://localhost:3001/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:latest
    container_name: db
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      proj_network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  
  frontend:
    image: tymonjs/frontend:latest
    build: 
      context: frontend
      args:
        NODE_VER: ${NODE_VER}
      platforms:
        - "linux/amd64"
        - "linux/arm64"
    container_name: frontend
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    command: npm run start
    networks:
      proj_network:
        ipv4_address: 172.20.0.12

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.4
    container_name: keycloak
    env_file:
      - .env
    ports: 
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json
    command: start-dev --import-realm
    networks:
      proj_network:
        ipv4_address: 172.20.0.13
    healthcheck:
  
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost:9000\\r\\nConnection: close\\r\\n\\r\\n' >&3; cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1"]
      interval: 30s 
      timeout: 10s     
      retries: 5 
      start_period: 60s   
      
volumes:
  postgres_data:
  keycloak_data:

networks:
  proj_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1

